// allprojects {
// 	plugins.withType(JavaPlugin) {
// 	}
// }

// build jar
void jarTask(String name, String classifier, boolean withJar, boolean includeDependencies) {
    tasks.create(name: name, type: Jar) {
        group 'build'
        archiveClassifier.set classifier
        // leave the file/entry that was first copied/created in place
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        manifest.from jar.manifest
        if (includeDependencies) {
            dependsOn configurations.runtimeClasspath
            from {
                configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') }.collect { zipTree(it) }
            } {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
        }
        if (withJar) {
            with jar // from sourceSets.main.output
        }
    }
}

if (plugins.hasPlugin('java')) {
    jarTask('depJar', 'dependencies', false, true)
    jarTask('fatJar', 'all', true, true)
    task allJar {
        group 'build'
        dependsOn jar, depJar, fatJar
    }

    task testJar(type: Jar) {
        group 'build'
        archiveClassifier.set 'test'
        from sourceSets.test.output
    }
}
